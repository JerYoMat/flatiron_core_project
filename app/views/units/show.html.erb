<div id="pseudo-root">
</div>

<script>
const pseudoRoot = document.getElementById('pseudo-root');
let unitId = Number(window.location.pathname.split("/units/")[1]);
let topicList = [];

function getCreateAndRenderUnit() {
  //get data for the specified unit using the global variable unitId
  fetch(`${unitId}/first_call`)
    .then(function(unitData) { //convert response to JSON
      return unitData.json();
    })
    .then(function(unitData){  //create unit object to satisfy show req
      const unit = new Unit(unitData)
      const baseTemplate = unit.baseTemplate()
      $(pseudoRoot).html(baseTemplate) //append data to DOM
    })
}

function getAndCreateTopics() {
  fetch(`${unitId}/topics`)
    .then(function(topicsData){
      return topicsData.json();
    })
    .then(function(topicsData) {
      let topicTitleString = ''
      topicsData.forEach((topicData) => {
        const topic = new Topic(topicData);
        topicTitle = topic.formatTopicTitle();
        topicTitleString += topicTitle;
        topicList.push(topic)
      });
      $("#topics_container").html(topicTitleString);
    })
    .then(function() {
        $("li").each(function() {
          $(this).click(()=>{
          $('li').removeClass("active");
          $(this).addClass('active');
          });
          $(this).click(createAndLoadTips)
        });
    })
}

function createAndLoadTips() {
  let topicId = this.getAttribute('topic-id')
  const selectedTopic = topicList.filter( t => t.id == topicId
  )[0];
  $(".place_for_tips").empty()
  selectedTopic.tips.forEach((tipData)=>{
    tip = new Tip(tipData)
    $(".place_for_tips").append(tip.formatTip()); 
  })
}


async function showUnitAndTopics() {
 let promise = new Promise((resolve, reject) => {
    resolve(getCreateAndRenderUnit())
 });
 await promise;
 getAndCreateTopics()
}

showUnitAndTopics();

class Unit {
  constructor(arg) {
    this.id = arg.id;
    this.title = arg.title;
    this.imageName = arg.image_path;
  }
  baseTemplate() {
    return (`
    <img src=/assets/${this.imageName}>
    <h1>${this.title}</h1><br>
    <div class="row">
      <div class="col-md-4">
        <ul id="topics_container" class="list-group">
        </ul>
      </div>
      <div id="tip_holder" class="col-md-8 card">
        <div class="place_for_tips">
        </div>
      </div>
    </div>`
  )
  }   
}

class Topic {
  constructor(arg) {
    this.id = arg.id;
    this.title = arg.title;
    this.courseOrder = arg.course_order;
    this.tips = arg.tips
  }
  formatTopicTitle() {
      return `<li topic-id="${this.id}" class="list-group-item">${this.title}</li>` 
  }
}

class Tip {
  constructor(jsonTip) {
    this.id = jsonTip.id;
    this.title = jsonTip.title;
    this.link = jsonTip.link;
    this.resource_type = jsonTip.resource_type;
    this.time_requirement = jsonTip.time_requirement;
  }
  formatTip(){
    return `<div class='card'>
      <div class='card-body'>
        <h5 class='card-title'>${this.title}</h5>
        <p>${this.link}</p>
        <p>${this.resource_type}</p>
        <p>${this.time_requirement}</p> 
      </div>
    </div>`
  }
}



</script>

<style>
   
    img{ 
        display: block;
        margin-top: 5%;
        margin-right: auto;
        margin-left: auto;
        width: 30%;
        max-width: 150px;
    }
    div#tip_holder {border: 1px solid rgba(0, 0, 0, 0.125);
                    padding: 0;}

    

  
</style>