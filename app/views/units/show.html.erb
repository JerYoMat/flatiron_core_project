<div id='pseudo-root'>
</div>
<div id='modal-div'></div>

<script>
/*TODO: Questions: next-unit, prev-unit, and topics-container are dependent upon the base template having been rendered.  What is the best-practice approach for assigning variables in such an instance assuming that successive calls will need to be made?
TODO: When defining the form element what is the best way to define it once so that both the event listener and callback function have access without making it global?  Note form is rendered dynamically
*/
const pseudoRoot = $('#pseudo-root');
let topicList = [];
let unit;
let unitId = Number(window.location.pathname.split('/units/')[1])


const getCreateAndRenderUnit = () => {
  const unitUrl = `${unitId}/first_call`;
  fetch(unitUrl)
    .then((unitData) => (unitData.json()))
    .then((unitData) => {
      unit = new Unit(unitData);
      const baseTemplate = unit.baseTemplate();
      pseudoRoot.html(baseTemplate); 
    })
    .then(() => {
      const nextButton = $('#next-unit');
      const prevButton = $('#prev-unit');
      nextButton.click(loadNextUnit);
      prevButton.click(loadPrevUnit);
    })
}

//TODO: Need to add max min call
const loadNextUnit = () => {
  unitId === 14 
    ? unitId = 1 
    : unitId++;
  topicList = [];
  showUnitAndTopics();
};
const loadPrevUnit = () => {
  unitId === 1 
    ? unitId = 14 
    : unitId--;
  topicList = [];
  showUnitAndTopics();
};
const getAndCreateTopics = () => {
  const topicsUrl = `${unitId}/topics`;
  fetch(topicsUrl)
    .then((topicsData) => (topicsData.json()))
    .then((topicsData) => {
      let topicTitleString = '';
      topicsData.forEach((topicData) => {
        const topic = new Topic(topicData);
        topicList.push(topic);
        topicTitle = topic.formatTopicTitle();
        topicTitleString += topicTitle;
      });
      const topicsContainer = $('#topics_container');
      topicsContainer.html(topicTitleString);
    })
    .then(() => {
      $('li').each((index, val) => {
        $(val).click((evt) => {
          $('li').removeClass('active');
          $(evt.target).addClass('active');
        });
        $(val).click(createAndLoadTips);
      });
    })
}


const showUnitAndTopics = async () => {
  let promise = new Promise((resolve) => {
    resolve(getCreateAndRenderUnit());
  });
  await promise;
  getAndCreateTopics();
}

const loginForm = () => (
  `<div id='login' class='modal'>
    <!-- Modal content -->
    <div class='modal-content'>
      <span class='close'>&times;</span>
      <div class='card'>
        <article class='card-body'>
          <h4 class='card-title text-center mb-4 mt-1'>Sign in</h4>
          <p id='error-message'></p>
          <hr>
          <form>
            <div class='form-group'>
              <div class='input-group'>
                <div class='input-group-prepend'>
                  <span class='input-group-text'> <i class='fa fa-user'></i> </span>
                </div>
                <input name='email' class='form-control' placeholder='Email or login' type='email'>
              </div> <!-- input-group.// -->
            </div> <!-- form-group// -->
            <div class='form-group'>
              <div class='input-group'>
                <div class='input-group-prepend'>
                  <span class='input-group-text'> <i class='fa fa-lock'></i> </span>
                </div>
                <input class='form-control' name='password' placeholder='******' type='password'>
              </div> <!-- input-group.// -->
            </div> <!-- form-group// -->
            <div class='form-group'>
              <button type='submit' class='btn btn-primary btn-block'> Login </button>
            </div> <!-- form-group// -->
          </form>
        </article>
      </div> <!-- card.// -->
    </div>
  </div>`
)

const renderLoginModal = async (evt) => {
  evt.preventDefault();
  const modalContainer = $('#modal-div');
  let promise = new Promise((resolve) => {
    resolve(modalContainer.append(loginForm));
  });
  let result = await promise; 
  const formElement = $('form');
  const closeButton = $('.close');
  formElement.submit(logInUser);
  closeButton.click(removeModal);
}

const logInUser = async (evt) => {
  evt.preventDefault();
  let promise = new Promise((resolve) => {
    const formElement = $('form');
    const formData = formElement.serialize();
    formSubmitUrl = '/login_remote';
    resolve($.post(formSubmitUrl, formData));
  })
  let result = await promise;
  if (result.id) {
    const currentPath = `/units/${unitId}`;
    window.location.pathname = currentPath;
  } else {
    const errorMessageElement = $('#error-message');
    const text = 'invalid email password combination';
    errorMessageElement.text(text);
    errorMessageElement.addClass('alert alert-danger');
  }
  
}

const removeModal = () => {
  const modalDiv = $('#modal-div');
  modalDiv.empty();
}



$(document).ready(() => {
  showUnitAndTopics();
  $('#sign_in').click(renderLoginModal);
});


const createAndLoadTips = (evt) => {
  let topicId = evt.target.getAttribute('topic-id');
  const filteredTopics = topicList.filter(t => t.id == topicId);
  const selectedTopic = filteredTopics[0];
  const tipContainer = $('.place_for_tips');
  tipContainer.empty();
  selectedTopic.tips.forEach((tipData) => {
    tip = new Tip(tipData);
    tipContainer.append(tip.formatTip());
  })
}


//TODO: Change arg object to individual items
class Unit {
  constructor(arg) {
    this.id = arg.id;
    this.title = arg.title;
    this.imageName = arg.image_path;
  };
  baseTemplate() {
    return (`
      <img src=/assets/${this.imageName}>
      <h1>${this.title}</h1><br>
      <button id='prev-unit'>Previous Unit</button>
      <button id='next-unit'>Next Unit</button>
      <div class='row'>
        <div class='col-md-4'>
          <ul id='topics_container' class='list-group'>
          </ul>
        </div>
        <div id='tip_holder' class='col-md-8 card'>
          <div class='place_for_tips'>
          </div>
        </div>
      </div>`)
  };
};

class Topic {
  constructor(arg) {
    this.id = arg.id;
    this.title = arg.title;
    this.courseOrder = arg.course_order;
    this.tips = arg.tips
  };
  formatTopicTitle() {
    return `<li topic-id='${this.id}' class='list-group-item'>${this.title}</li>`;
  };
};

class Tip {
  constructor(arg) {
    this.id = arg.id;
    this.title = arg.title;
    this.link = arg.link;
    this.resource_type = arg.resource_type;
    this.time_requirement = arg.time_requirement;
  };
  formatTip() {
    return `<div class='card'>
      <div class='card-body'>
        <h5 class='card-title'>${this.title}</h5>
        <p>${this.link}</p>
        <p>${this.resource_type}</p>
        <p>${this.time_requirement}</p>
      </div>
    </div>`;
  };
};

</script>

<style>
   
    img{ 
        display: block;
        margin-top: 5%;
        margin-right: auto;
        margin-left: auto;
        width: 30%;
        max-width: 150px;
    }
    div#tip_holder {border: 1px solid rgba(0, 0, 0, 0.125);
                    padding: 0;}

    i{
      position: relative;
      float: right;
    }

  
</style>