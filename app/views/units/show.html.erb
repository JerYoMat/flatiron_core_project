<div id="pseudo-root">
</div>
<div id="modal-div"></div>

<script>
const pseudoRoot = $('#pseudo-root');
let unitId = Number(window.location.pathname.split("/units/")[1]);
let topicList = [];


const getCreateAndRenderUnit = () => {
  //get data for the specified unit using the global variable unitId
  fetch(`${unitId}/first_call`)
    .then((unitData) => (unitData.json()))
    .then((unitData) => { //create unit object to satisfy show req
      const unit = new Unit(unitData);
      const baseTemplate = unit.baseTemplate();
      $(pseudoRoot).html(baseTemplate); //append data to DOM
    })
    .then(() => {
      $('#next-unit').click(loadNextUnit);
      $('#prev-unit').click(loadPrevUnit);
    })
}
const loadNextUnit = () => {
  unitId === 14 ? unitId = 1 : unitId++
  topicList = [];
  showUnitAndTopics();
};
const loadPrevUnit = () => {
  unitId === 1 ? unitId = 14 : unitId--
  topicList = [];
  showUnitAndTopics();
};
const getAndCreateTopics = () => {
  fetch(`${unitId}/topics`)
    .then((topicsData) => (topicsData.json()))
    .then((topicsData) => {
      let topicTitleString = ''
      topicsData.forEach((topicData) => {
        const topic = new Topic(topicData);
        topicList.push(topic)
        topicTitle = topic.formatTopicTitle();
        topicTitleString += topicTitle;
      });
      $("#topics_container").html(topicTitleString);
    })
    .then(() => {
      $("li").each(() => {
        $(this).click((evt) => {
          $('li').removeClass("active");
          $(evt.target).addClass('active');
        });
        $(this).click(createAndLoadTips);
      });
    })
}

const createAndLoadTips = (evt) => {
  let topicId = evt.target.getAttribute('topic-id')
  const selectedTopic = topicList.filter(t => t.id == topicId)[0];
  $(".place_for_tips").empty()
  selectedTopic.tips.forEach((tipData) => {
    tip = new Tip(tipData)
    $(".place_for_tips").append(tip.formatTip());
  })
}

const showUnitAndTopics = async () => {
  let promise = new Promise((resolve) => {
    resolve(getCreateAndRenderUnit())
  });
  await promise;
  getAndCreateTopics();
}

const loginForm = () => (
  `<div id="login" class="modal">
    <!-- Modal content -->
    <div class="modal-content">
      <span class="close">&times;</span>
      <div class="card">
        <article class="card-body">
          <h4 class="card-title text-center mb-4 mt-1">Sign in</h4>
          <p id="error-message"></p>
          <hr>
          <form>
            <div class="form-group">
              <div class="input-group">
                <div class="input-group-prepend">
                  <span class="input-group-text"> <i class="fa fa-user"></i> </span>
                </div>
                <input name="email" class="form-control" placeholder="Email or login" type="email">
              </div> <!-- input-group.// -->
            </div> <!-- form-group// -->
            <div class="form-group">
              <div class="input-group">
                <div class="input-group-prepend">
                  <span class="input-group-text"> <i class="fa fa-lock"></i> </span>
                </div>
                <input class="form-control" name="password" placeholder="******" type="password">
              </div> <!-- input-group.// -->
            </div> <!-- form-group// -->
            <div class="form-group">
              <button type="submit" class="btn btn-primary btn-block"> Login </button>
            </div> <!-- form-group// -->
          </form>
        </article>
      </div> <!-- card.// -->
    </div>
  </div>`
)

const renderLoginModal = async (evt) => {
  evt.preventDefault();
  const modalContainer = $('#modal-div');
  let promise = new Promise((resolve) => {
    resolve(modalContainer.append(loginForm))
  });
  let result = await promise //wait for html to be rendered and attach event listener
  $('form').submit(logInUser)
  $('.close').click(removeModal)
}

const logInUser = async (evt) => {
  evt.preventDefault()
  let promise = new Promise((resolve) => {
    const formData = $('form').serialize()
    resolve($.post('/login', formData))
  })
  let result = await promise
  window.location.pathname = `/units/${unitId}`
}

const removeModal = () => {
  $('#modal-div').empty()
}



//What runs on page load
$(document).ready(() => {
  showUnitAndTopics();
  $('#sign_in').click(renderLoginModal);
})







class Unit {
  constructor(arg) {
    this.id = arg.id;
    this.title = arg.title;
    this.imageName = arg.image_path;
  }
  baseTemplate() {
    return (`
      <img src=/assets/${this.imageName}>
      <h1>${this.title}</h1><br>
      <button id='prev-unit'>Previous Unit</button>
      <button id='next-unit'>Next Unit</button>
      <div class="row">
        <div class="col-md-4">
          <ul id="topics_container" class="list-group">
          </ul>
        </div>
        <div id="tip_holder" class="col-md-8 card">
          <div class="place_for_tips">
          </div>
        </div>
      </div>`)
  }
}

class Topic {
  constructor(arg) {
    this.id = arg.id;
    this.title = arg.title;
    this.courseOrder = arg.course_order;
    this.tips = arg.tips
  }
  formatTopicTitle() {
    return `<li topic-id="${this.id}" class="list-group-item">${this.title}</li>`
  }
}

class Tip {
  constructor(arg) {
    this.id = arg.id;
    this.title = arg.title;
    this.link = arg.link;
    this.resource_type = arg.resource_type;
    this.time_requirement = arg.time_requirement;
  }
  formatTip() {
    return `<div class='card'>
      <div class='card-body'>
        <h5 class='card-title'>${this.title}</h5>
        <p>${this.link}</p>
        <p>${this.resource_type}</p>
        <p>${this.time_requirement}</p>
      </div>
    </div>`
  }
}

</script>

<style>
   
    img{ 
        display: block;
        margin-top: 5%;
        margin-right: auto;
        margin-left: auto;
        width: 30%;
        max-width: 150px;
    }
    div#tip_holder {border: 1px solid rgba(0, 0, 0, 0.125);
                    padding: 0;}

    i{
      position: relative;
      float: right;
    }

  
</style>